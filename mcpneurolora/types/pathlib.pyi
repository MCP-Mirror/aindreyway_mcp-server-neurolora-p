"""Type stubs for pathlib."""

from typing import Any, Optional, Union

from typing_extensions import TypeAlias

# Type aliases
StrPath: TypeAlias = Union[str, "Path"]
PathLike: TypeAlias = Union[str, "Path"]

class Path:
    def __new__(cls, *args: StrPath) -> "Path": ...
    def __str__(self) -> str: ...
    def __truediv__(self, key: StrPath) -> "Path": ...
    def __rtruediv__(self, key: StrPath) -> "Path": ...
    def __eq__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def suffix(self) -> str: ...
    @property
    def parent(self) -> "Path": ...
    @property
    def parts(self) -> tuple[str, ...]: ...
    def is_dir(self) -> bool: ...
    def is_file(self) -> bool: ...
    def exists(self) -> bool: ...
    def is_absolute(self) -> bool: ...
    def is_symlink(self) -> bool: ...
    def resolve(self, strict: bool = True) -> "Path": ...
    def absolute(self) -> "Path": ...
    def relative_to(self, other: StrPath) -> "Path": ...
    def read_text(self, encoding: Optional[str] = None) -> str: ...
    def write_text(self, data: str, encoding: Optional[str] = None) -> int: ...
    def mkdir(
        self, mode: int = 0o777, parents: bool = False, exist_ok: bool = False
    ) -> None: ...
    def stat(self) -> Any: ...  # Returns os.stat_result
